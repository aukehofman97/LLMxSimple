FUNCTION transformData(input):
    # Initialize the output structure with empty lists for Event, Location, and BusinessTransaction
    OUTPUT = {
        "Event": LIST,
        "Location": LIST,
        "BusinessTransaction": LIST
    }

    # Generate UUIDs for the main event, location, and business transaction entities
    main_event_uuid = STRING(generateUUID())
    location_uuid = STRING(generateUUID())
    business_transaction_uuid = STRING(generateUUID())

    # Process Event
    MAIN_EVENT = {
        "Event_UUID": STRING(main_event_uuid),
        "Actual_Time": STRING(input["message"]["place"]["dateTimeType"]["dateTime"]) IF "place" in input["message"] ELSE null,
        "milestone": STRING(deriveMilestone(input["message"]["eventType"])),
        "involvesLocation": STRING(location_uuid),
        "involvesBusinessTransaction": STRING(business_transaction_uuid),
        "involvesSeal": OPTIONAL(null),     # Placeholder for Seal UUID, updated if present
        "involvesWagon": OPTIONAL(null),    # Placeholder for Wagon UUID, updated if present
        "involvesContainer": OPTIONAL([])   # Placeholder for Container UUIDs list, updated if present
    }

    # Process Location as always present, with content dynamically set from the input
    LOCATION = {
        "UUID": STRING(location_uuid),
        "function": STRING("Terminal"), # Example fixed function type; modify if additional logic needed
        "locationCode": STRING(input["message"]["place"]["placeLocalization"]["terminalNode"]["nodeCode"]) IF input["message"]["place"]["placeLocalization"]["terminalNode"] ELSE null
    }
    OUTPUT["Location"].append(LOCATION)

    # Process BusinessTransaction as always present, with content dynamically set from the input
    BUSINESS_TRANSACTION = {
        "UUID": STRING(business_transaction_uuid),
        "externalReference": STRING(input["message"]["externalConsignmentId"])
    }
    OUTPUT["BusinessTransaction"].append(BUSINESS_TRANSACTION)

    # Detect and process any additional dynamic entities
    IF "equipments" in input["message"]:
        FOR each equipment IN input["message"]["equipments"]:
            # Process each equipment and gather UUIDs for Seal, Wagon, and Container if present
            entity_uuids = processDynamicEntities(equipment, OUTPUT)
            IF "sealUUID" in entity_uuids:
                MAIN_EVENT["involvesSeal"] = entity_uuids["sealUUID"]
            IF "wagonUUID" in entity_uuids:
                MAIN_EVENT["involvesWagon"] = entity_uuids["wagonUUID"]
            IF "containerUUID" in entity_uuids:
                MAIN_EVENT["involvesContainer"].append(entity_uuids["containerUUID"])

    # Append MAIN_EVENT to Event in OUTPUT
    OUTPUT["Event"].append(MAIN_EVENT)

    # Return the transformed output structure
    RETURN OUTPUT

# Utility function to handle dynamic entity generation based on attributes in equipment
FUNCTION processDynamicEntities(entity, OUTPUT):
    # Initialize a dictionary to store UUIDs for detected entities
    entityUUIDs = {
        "containerUUID": null,
        "sealUUID": null,
        "wagonUUID": null
    }

    # Process dynamic attributes for Container, Seal, Wagon, etc.
    IF "equipmentId" in entity:
        container_uuid = STRING(generateUUID())
        CONTAINER = {
            "UUID": container_uuid,
            "ContainerNumber": STRING(entity["equipmentId"]),
            "ContainerSize": NUMBER(entity["grossWeight"]),
            "ContainerType": STRING(entity["equipmentType"]["code"]),
            "Full_Empty": BOOLEAN(not entity["isEmpty"]),
            "DamageRemarks": STRING(entity["damageRemarks"]),
            "DangerousIndication": STRING(entity["dangerousEquipmentDescription"]),
            "Description": STRING(entity["equipmentType"]["description"])
        }
        OUTPUT["Container"] = OUTPUT.get("Container", LIST) # Create Container list dynamically if not present
        OUTPUT["Container"].append(CONTAINER)
        entityUUIDs["containerUUID"] = container_uuid

    IF "sealIndicator" in entity:
        seal_uuid = STRING(generateUUID())
        SEAL = {
            "UUID": STRING(seal_uuid),
            "SealNumber": STRING(entity["sealIndicator"])
        }
        OUTPUT["Seal"] = OUTPUT.get("Seal", LIST) # Create Seal list dynamically if not present
        OUTPUT["Seal"].append(SEAL)
        entityUUIDs["sealUUID"] = seal_uuid

    IF "wagonId" in entity:
        wagon_uuid = STRING(generateUUID())
        WAGON = {
            "UUID": STRING(wagon_uuid),
            "WagonNumber": STRING(entity["wagonId"]),
            "WagonType": STRING(entity.get("wagonType", ""))
        }
        OUTPUT["Wagon"] = OUTPUT.get("Wagon", LIST) # Create Wagon list dynamically if not present
        OUTPUT["Wagon"].append(WAGON)
        entityUUIDs["wagonUUID"] = wagon_uuid

    RETURN entityUUIDs

# Utility Functions
FUNCTION generateUUID() -> STRING:
    RETURN "genid-" + randomString()  # Generate a unique identifier string

FUNCTION deriveMilestone(eventType) -> STRING:
    # Define mappings for different event types
    MILESTONE_MAPPINGS = {
        "ARRIVAL_EVENT": "start",
        "DEPARTURE_EVENT": "end",
        "CARGO_EVENT_LOAD_EVENT": "load"
        # Add additional mappings as necessary
    }
    RETURN MILESTONE_MAPPINGS.get(eventType, "unknown")