FUNCTION transformData(input):
    # Initialize the output structure with empty lists for Event, Location, and BusinessTransaction
    OUTPUT = {
        "Event": [],
        "Location": [],
        "BusinessTransaction": 
    }

    # Generate unique UUIDs for the main event, location, and business transaction entities
    main_event_uuid = generateUUID()
    location_uuid = generateUUID() IF "place" in input["message"] ELSE null
    business_transaction_uuid = generateUUID() IF "externalConsignmentId" in input["message"] ELSE null

    # Process Event
    MAIN_EVENT = {
        "Event_UUID": main_event_uuid,
        "Actual_Time": input["message"]["place"]["dateTimeType"]["dateTime"] IF "place" in input["message"] ELSE null,
        "milestone": deriveMilestone(input["message"]["eventType"]), # Custom function to map event types to milestones
        "involvesLocation": location_uuid,
        "involvesBusinessTransaction": business_transaction_uuid
    }
    OUTPUT["Event"].append(MAIN_EVENT)

    # Process Location if present in the input
    IF "place" in input["message"]:
        LOCATION = {
            "UUID": location_uuid,
            "function": "Terminal", # Example fixed function type; adjust based on input if needed
            "locationCode": input["message"]["place"]["placeLocalization"]["terminalNode"]["nodeCode"]
        }
        OUTPUT["Location"].append(LOCATION)

    # Process BusinessTransaction if present in the input
    IF "externalConsignmentId" in input["message"]:
        BUSINESS_TRANSACTION = {
            "UUID": business_transaction_uuid,
            "externalReference": input["message"]["externalConsignmentId"]
        }
        OUTPUT["BusinessTransaction"].append(BUSINESS_TRANSACTION)

    # Return the transformed output structure
    RETURN OUTPUT

# Utility Functions
FUNCTION generateUUID():
    RETURN "genid-" + randomString()  # Generate a unique identifier string

FUNCTION deriveMilestone(eventType):
    # Define mappings for different event types
    MILESTONE_MAPPINGS = {
        "ARRIVAL_EVENT": "start",
        "DEPARTURE_EVENT": "end"
        # Add additional mappings as necessary
    }
    RETURN MILESTONE_MAPPINGS.get(eventType, "unknown")